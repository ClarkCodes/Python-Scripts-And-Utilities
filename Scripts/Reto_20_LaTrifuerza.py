# Retos Semanales ‚Äò23
# Reto #20: LA TRIFUERZA
# MEDIA | Publicaci√≥n: 15/05/23 | Resoluci√≥n: 22/05/23
#
# ¬°El nuevo "The Legend of Zelda: Tears of the Kingdom" ya est√° disponible! 
#
# Crea un programa que dibuje una Trifuerza de "Zelda" formada por asteriscos.
# - Debes indicarle el n√∫mero de filas de los tri√°ngulos con un entero positivo (n).
# - Cada tri√°ngulo calcular√° su fila mayor utilizando la f√≥rmula 2n-1.
#
# Ejemplo: Trifuerza 2
# 
#    *
#   ***
#  *   *
# *** ***
#

# Autor: Clark - @ClarkCodes
# Fecha de Resoluci√≥n: 18/05/2023

# Imports
import typer
from rich import print
from enum import Enum

# Constantes
SPACE = " "
ASTERISK = "[yellow]*"

# Atributos Globales
welcome_pending = True

# Enums
class TrianglesFloor( Enum ):
    TOP = 1
    BOT = 2

class CharType( Enum ):
    SPACE = 1
    ASTERISK = 2

# Funciones - M√©todos
def main_menu():
    global welcome_pending

    if( welcome_pending ):
        print( "[green]Bienvenido al Script de[/green] [yellow]La Trifuerza[/yellow], [green]ya que ha salido el nuevo Zelda, en horabuena, ¬°vamos a dibujar una![/green] üòÄ\n" )
        welcome_pending = False
    else:
        print( "[green]¬øDibujamos otra?\n" )

    print( "[green]A continuaci√≥n debes ingresar un n√∫mero entero positivo, como m√≠nimo 2, o ingresa 'q' si deseas salir." )
    print( "[green]¬øDe cuantas filas quieres que sea cada tri√°ngulo?\n" )

def char_writer( char_cant: int, char_type : CharType ):
    char = SPACE if char_type == CharType.SPACE else ASTERISK
    for ch in range( 0, char_cant ):
        print( char, end = "" )

def triangles_drawer( rows_cant : int, triangle_base_len : int, triangle_floor : TrianglesFloor ):
    asterisk_cant = 1 # Asterisks start with 1 and it grows with an increment of 2

    if( triangle_floor == TrianglesFloor.TOP ):
        spaces_count = triangle_base_len # Initial spaces quantity, it decrements with a step of 1
        
        for row_num in range( 0, rows_cant ): # Loop for the rows, in every row there are spaces and asterisks
            char_writer( spaces_count, CharType.SPACE )
            spaces_count -= 1

            char_writer( asterisk_cant, CharType.ASTERISK )
            asterisk_cant += 2

            print( " " ) # Necessary new lane because spaces and asterisks are drawn secuentially on the same line.

    elif( triangle_floor == TrianglesFloor.BOT ):
        spaces_count = rows_cant - 1 # Initial spaces quantity for second floor, it decrements with a step of 1
        middle_spaces_count = triangle_base_len # Spaces in the middle to draw the second triangle of the second floor

        for row_num in range( 0, rows_cant ): # Loop for the rows, in every row there are spaces and asterixs
            # Initial Spaces
            char_writer( spaces_count, CharType.SPACE )
            spaces_count -= 1

            # First Triangle Asterisks
            char_writer( asterisk_cant, CharType.ASTERISK )

            # Middle Spaces or Asterisk
            if( middle_spaces_count > 1 ):
                char_writer( middle_spaces_count, CharType.SPACE )
            else:
                char_writer( middle_spaces_count, CharType.ASTERISK )

            middle_spaces_count -= 2

            # Second Triangle Asterisks
            char_writer( asterisk_cant, CharType.ASTERISK )

            asterisk_cant += 2 # Asterisk increment, just now because the second triangle must be drawn exactly the same as the first one, so the asterisks work for the first and the second one in every iteration and the increment happens after both have been drawn
            print( " " )

def triforce_drawer( rows_cant : int ):
    triangle_base_len = ( 2 * rows_cant ) - 1 # F√≥rmula 2n - 1
    print( f"[yellow]-*-[/yellow] [green]Contemplad[/green] [yellow]¬°LA TRIFUERZA![/yellow] [green]con[/green] [yellow]{rows_cant}[/yellow] [green]filas por Tri√°ngulo[/green] [yellow]-*-[/yellow]\n" )
    triangles_drawer( rows_cant, triangle_base_len, TrianglesFloor.TOP )
    triangles_drawer( rows_cant, triangle_base_len, TrianglesFloor.BOT )

def main():
    while True:
        print( "[bold green]\n*** Reto #20: LA TRIFUERZA - By @ClarkCodes ***\n" )
        main_menu()

        print( "[bold green]N√∫mero de filas por tri√°ngulo[/bold green]", end = "" )
        userAnswer = typer.prompt( "", default="2" )
        
        if( userAnswer == 'q' or userAnswer == 'Q' ): # Condici√≥n de Salida
            print( "[green]\n‚úÖ Esto ha sido todo por hoy.\n‚ù§ Muchas gracias por ejecutar este Script, hasta la pr√≥xima...üíª Happy Coding!,üëãüèº bye :D\nüòé Clark." )
            break

        try:
            rows_cant = int( userAnswer ) # Se convierte la opcion ingresada por el usuario de texto a entero
            
            if( rows_cant >= 2 ):
                print( " " )
                triforce_drawer( rows_cant )

            else:
                print( "\n‚ùå Solo se admiten n√∫meros enteros positivos mayores o iguales a 2, o la letra 'q' si deseas salir, verifique nuevamente." )

        except ValueError as ve:
            print( "\n‚ùå Opci√≥n ingresada no disponible, solo se admiten n√∫meros enteros positivos mayores o iguales a 2, o la letra 'q' si deseas salir, verifique nuevamente." )
            #print( f"{ve}\n{traceback.print_exc()}" )
        except Exception as ex:
            print( "\n‚ùå Oops... algo no ha salido bien, revise nuevamente por favor." )
            #print( f"{ex}\n{traceback.print_exc()}" )

    raise typer.Abort()

# Llamada a la Funci√≥n Principal usando typer
if __name__ == "__main__":
    typer.run( main )

#
# *** Razonamiento y an√°lisis previo para dibujar los tri√°ngulos ***
#
# + Observaci√≥n:
#
# N√∫mero de Filas: 2 - Tri√°ngulo Individual
#  *
# ***
#
# N√∫mero de Filas: 3 - Tri√°ngulo Individual
#   *
#  ***
# *****
# 
# N√∫mero de Filas: 4 - Trifuerza completa
#        *
#       ***
#      *****
#     *******
#    *       *
#   ***     ***
#  *****   *****
# ***************
#
#  
# + Explicaci√≥n:
#
# Para la base de los tri√°ngulos se usa la f√≥rmula indicada: 2n - 1, cuyo resultado se usar√° 
# para la cantidad de unidades(asteriscos) de la base de cada tri√°ngulo.
# La Trifuerza se va a dividir en dos pisos, el primero con el tri√°ngulo superior y el segundo
# con los dos tri√°ngulos inferiores.
#
# Se obervan los siguientes patrones:
# 
# - Se empieza con un asterisco como la punta del tri√°ngulo, de all√≠ hay un incremento homogenio  
# de 2 unidades hasta llegar a la cantidad de unidades de la base, la cual fu√© calculada por la 
# formula anteriormente mencionada. 
# Al realizar el incremento de 2 en 2, esto coincide con el n√∫mero de filas que debe haber cuando 
# se llega al n√∫mero de unidades que la base debe tener.
#
# - El n√∫mero de espacios inicial en el primer piso que se debe dejar para dibujar el tri√°ngulo superior,
# empezando por supuesto por el asterisco de la punta, es igual al n√∫mero de unidades de la base, es decir 
# al resultado calculado por la f√≥rmula mencionada anteriormente, esto se da por la propiedad de tri√°ngulos 
# semejantes descrita en geometr√≠a.
#
# - En el segundo piso hay dos intervalos de espacios, el primero desde borde de la pantalla hasta el primer 
# asterisco en una cierta linea del tri√°ngulo de la izquiera y el segundo desde el ultimo asteristo dibujado 
# en esa linea del triangulo de la izquierda dibujado en esa linea hasta el primer asterisco del triangulo de 
# la derecha que corresponde en esa linea.
#
# - El n√∫mero de espacios inicial del segundo piso(donde estan los dos tri√°ngulos inferiores) que se debe 
# dejar para dibujar el primer asterisco de la punta del tri√°ngulo de la izquierda y que as√≠ se forme una 
# simetr√≠a con las dem√°s filas, es igual al n√∫mero de filas ingresado menos uno, es decir: n - 1. 
# Estos espacios tanto en el primer, como en el segundo piso van disminuyendo de 1 en 1 en cada fila posterior, 
# por lo tanto, si el n√∫mero de filas ingresado fu√© 5, entonces la cantidad inicial de espacios para 
# dibujar el asterisco de la punta en el primer piso es 9, en la siguiente fila es 8, en la siguiente es 7, 
# luego 6 y luego 5, en el segundo piso en cambio es 4, luego 3, en la siguiente 2, luego 1 y hasta al final 
# llegar a 0, es decir en la fila base del segundo piso no deben haber espacios para dibujar la base del 
# triangulo. De esta manera se coincide con el n√∫mero de filas requerido.
# 
# - Para dibujar los dos triangulos inferiores, se debe tener en cuenta las proporciones y los espacios 
# necesarios a dibujarse en cada fila, teniendo en consideraci√≥n que entre las dos bases se debe a√±adir
# un asterisco extra en medio delas bases de estos, dado que de otra manera se estar√≠a dejando un espacio 
# vac√≠o en medio de los dos tri√°ngulos inferiores y en mi opini√≥n se ver√≠a raro, parecer√≠a como que algo 
# ah√≠ no coincidir√≠a.